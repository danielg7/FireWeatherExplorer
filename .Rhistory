}
for(i in unique(GreenupDates$Year)){
print(i)
minDateDF <- filter(workingDF, Year == i) %>% summarise(minDate = min(DateTime, na.rm = T))
maxDateDF <- filter(workingDF, Year == i) %>% summarise(maxDate = max(DateTime, na.rm = T))
minDate <- minDateDF[1,1]
maxDate <- maxDateDF[1,1]
GUDate <- GreenupDates$GreenUpDate[GreenupDates$Year == i]
SDate <- GreenupDates$SenesenceDate[GreenupDates$Year == i]
workingDF[which(workingDF$DateTime >= minDate & workingDF$DateTime <= GUDate & workingDF$DateTime <= SDate & workingDF$Year == i ),]$WoodyLiveFM <- 80
workingDF[which(workingDF$DateTime >= SDate  & workingDF$Year == i),]$WoodyLiveFM <- 80
#workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$WoodyLiveFM <- mapply(cumsumHours, workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$WoodyLiveFM, workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$diffGSI, 200)
workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate& workingDF$Year == i),]$WoodyLiveFM <- cumsum( workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate  & workingDF$Year == i),]$WoodyLiveFM + workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate  & workingDF$Year == i),]$diffGSI )
workingDF[which(workingDF$DateTime < GUDate  & workingDF$Year == i),]$HerbaceousLiveFM <- 30
workingDF[which(workingDF$DateTime > SDate  & workingDF$Year == i),]$HerbaceousLiveFM <- 30
GUDate <- NA
SDate <- NA
}
return(workingDF)
}
testOutput <- liveFuelMoistures(DateTime = test$DateTime,
GreenupDates = seasonDF,
rollGSI = test$rollGSI)
ggplot(data = testOutput, aes(x = yday(DateTime), y = WoodyLiveFM))+
geom_line()+
geom_vline(data = seasonDF, color = "green", aes(xintercept = yday(seasonDF$GreenUpDate)))+
geom_vline(data = seasonDF, color = "red", aes(xintercept = yday(seasonDF$SenesenceDate)))+
facet_wrap(~Year)
?Reduce
f <- function(x, y){
max(min(x + y, max_value), min_value)
Reduce(f, a, 0, accumulate = TRUE)[-1]
}
f(c(1,1,1),c(1,2,3))
max_value <- 2
f <- function(x, y){
max(min(x + y, max_value), min_value)
Reduce(f, a, 0, accumulate = TRUE)[-1]
}
f(c(1,1,1),c(1,2,3))
min_value <- -1
f <- function(x, y){
max(min(x + y, max_value), min_value)
Reduce(f, a, 0, accumulate = TRUE)[-1]
}
f(c(1,1,1),c(1,2,3))
f(c(1,1,1),c(1,2,3))
min_value <- 0
f(c(1,1,1),c(1,2,3))
View(testOutput)
liveFuelMoistures <- function(DateTime, GreenupDates, rollGSI){
workingDF <- data.frame(DateTime,Year = year(DateTime),rollGSI)
workingDF$diffGSI <- c(0,diff(workingDF$rollGSI))
workingDF$WoodyLiveFM <- NA
workingDF$HerbaceousLiveFM <- NA
cumsumHours <- function(FuelMoisture, diffGSI, Peak){
returnValues <- NA
if(FuelMoisture + diffGSI < Peak & !is.na(diffGSI) & !is.na(FuelMoisture))
returnValues <- FuelMoisture + diffGSI
if(FuelMoisture + diffGSI >= Peak & !is.na(FuelMoisture) & !is.na(diffGSI))
returnValues <- Peak
if(!is.na(diffGSI))
returnValues <- NA
return(returnValues)
}
for(i in unique(GreenupDates$Year)){
print(i)
minDateDF <- filter(workingDF, Year == i) %>% summarise(minDate = min(DateTime, na.rm = T))
maxDateDF <- filter(workingDF, Year == i) %>% summarise(maxDate = max(DateTime, na.rm = T))
minDate <- minDateDF[1,1]
maxDate <- maxDateDF[1,1]
GUDate <- GreenupDates$GreenUpDate[GreenupDates$Year == i]
SDate <- GreenupDates$SenesenceDate[GreenupDates$Year == i]
workingDF[which(workingDF$DateTime >= minDate & workingDF$DateTime <= GUDate & workingDF$DateTime <= SDate & workingDF$Year == i ),]$WoodyLiveFM <- 80
workingDF[which(workingDF$DateTime >= SDate  & workingDF$Year == i),]$WoodyLiveFM <- 80
#workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$WoodyLiveFM <- mapply(cumsumHours, workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$WoodyLiveFM, workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$diffGSI, 200)
workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate& workingDF$Year == i),]$WoodyLiveFM <- 80 + cumsum(workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate  & workingDF$Year == i),]$diffGSI )
workingDF[which(workingDF$DateTime < GUDate  & workingDF$Year == i),]$HerbaceousLiveFM <- 30
workingDF[which(workingDF$DateTime > SDate  & workingDF$Year == i),]$HerbaceousLiveFM <- 30
GUDate <- NA
SDate <- NA
}
return(workingDF)
}
testOutput <- liveFuelMoistures(DateTime = test$DateTime,
GreenupDates = seasonDF,
rollGSI = test$rollGSI)
ggplot(data = testOutput, aes(x = yday(DateTime), y = WoodyLiveFM))+
geom_line()+
geom_vline(data = seasonDF, color = "green", aes(xintercept = yday(seasonDF$GreenUpDate)))+
geom_vline(data = seasonDF, color = "red", aes(xintercept = yday(seasonDF$SenesenceDate)))+
facet_wrap(~Year)
View(testOutput)
seasonDF <- findGreenupDates(test$DateTime,test$rollGSI)
ggplot(data = test, aes(x = yday(DateTime), y = rollGSI))+
geom_point()+
facet_wrap(~Year)
findGreenupDates <- function(DateTime, rollGSI){
workingDF <- data.frame(DateTime, rollGSI)
workingDF$Year <- year(DateTime)
greenup <- workingDF %>%
group_by(Year) %>%
filter(rollGSI >= 0.5) %>%
arrange(DateTime) %>%
ungroup() %>%
group_by(Year) %>%
summarise(GreenUpDate = min(DateTime))
senesence <- workingDF %>%
group_by(Year) %>%
filter(rollGSI >= 0.5) %>%
arrange(DateTime) %>%
ungroup() %>%
group_by(Year) %>%
summarise(SenesenceDate = max(DateTime))
growingSeason <- merge(greenup,senesence,by = "Year")
return(growingSeason)
}
seasonDF <- findGreenupDates(test$DateTime,test$rollGSI)
ggplot(data = test, aes(x = yday(DateTime), y = rollGSI))+
geom_point(alpha = .05)+
geom_vline(data = seasonDF, color = "green", aes(xintercept = yday(seasonDF$GreenUpDate)))+
geom_vline(data = seasonDF, color = "red", aes(xintercept = yday(seasonDF$SenesenceDate)))+
facet_wrap(~Year)
ggplot(data = test, aes(x = yday(DateTime), y = rollGSI))+
geom_line(color = "black")+
geom_vline(data = seasonDF, color = "green", aes(xintercept = yday(seasonDF$GreenUpDate)))+
geom_vline(data = seasonDF, color = "red", aes(xintercept = yday(seasonDF$SenesenceDate)))+
facet_wrap(~Year)
for(i in unique(GreenupDates$Year)){
print(i)
minDateDF <- filter(workingDF, Year == i) %>% summarise(minDate = min(DateTime, na.rm = T))
maxDateDF <- filter(workingDF, Year == i) %>% summarise(maxDate = max(DateTime, na.rm = T))
minDate <- minDateDF[1,1]
maxDate <- maxDateDF[1,1]
GUDate <- GreenupDates$GreenUpDate[GreenupDates$Year == i]
SDate <- GreenupDates$SenesenceDate[GreenupDates$Year == i]
workingDF[which(workingDF$DateTime >= minDate & workingDF$DateTime <= GUDate & workingDF$DateTime <= SDate & workingDF$Year == i ),]$WoodyLiveFM <- 80
workingDF[which(workingDF$DateTime >= SDate  & workingDF$Year == i),]$WoodyLiveFM <- 80
#workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$WoodyLiveFM <- mapply(cumsumHours, workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$WoodyLiveFM, workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$diffGSI, 200)
workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate& workingDF$Year == i),]$WoodyLiveFM <- 80 * cumsum(workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate  & workingDF$Year == i),]$diffGSI )
workingDF[which(workingDF$DateTime < GUDate  & workingDF$Year == i),]$HerbaceousLiveFM <- 30
workingDF[which(workingDF$DateTime > SDate  & workingDF$Year == i),]$HerbaceousLiveFM <- 30
GUDate <- NA
SDate <- NA
}
liveFuelMoistures <- function(DateTime, GreenupDates, rollGSI){
workingDF <- data.frame(DateTime,Year = year(DateTime),rollGSI)
workingDF$diffGSI <- c(0,diff(workingDF$rollGSI))
workingDF$WoodyLiveFM <- NA
workingDF$HerbaceousLiveFM <- NA
cumsumHours <- function(FuelMoisture, diffGSI, Peak){
returnValues <- NA
if(FuelMoisture + diffGSI < Peak & !is.na(diffGSI) & !is.na(FuelMoisture))
returnValues <- FuelMoisture + diffGSI
if(FuelMoisture + diffGSI >= Peak & !is.na(FuelMoisture) & !is.na(diffGSI))
returnValues <- Peak
if(!is.na(diffGSI))
returnValues <- NA
return(returnValues)
}
for(i in unique(GreenupDates$Year)){
print(i)
minDateDF <- filter(workingDF, Year == i) %>% summarise(minDate = min(DateTime, na.rm = T))
maxDateDF <- filter(workingDF, Year == i) %>% summarise(maxDate = max(DateTime, na.rm = T))
minDate <- minDateDF[1,1]
maxDate <- maxDateDF[1,1]
GUDate <- GreenupDates$GreenUpDate[GreenupDates$Year == i]
SDate <- GreenupDates$SenesenceDate[GreenupDates$Year == i]
workingDF[which(workingDF$DateTime >= minDate & workingDF$DateTime <= GUDate & workingDF$DateTime <= SDate & workingDF$Year == i ),]$WoodyLiveFM <- 80
workingDF[which(workingDF$DateTime >= SDate  & workingDF$Year == i),]$WoodyLiveFM <- 80
#workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$WoodyLiveFM <- mapply(cumsumHours, workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$WoodyLiveFM, workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$diffGSI, 200)
workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate& workingDF$Year == i),]$WoodyLiveFM <- 80 * cumsum(workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate  & workingDF$Year == i),]$diffGSI )
workingDF[which(workingDF$DateTime < GUDate  & workingDF$Year == i),]$HerbaceousLiveFM <- 30
workingDF[which(workingDF$DateTime > SDate  & workingDF$Year == i),]$HerbaceousLiveFM <- 30
GUDate <- NA
SDate <- NA
}
return(workingDF)
}
testOutput <- liveFuelMoistures(DateTime = test$DateTime,
GreenupDates = seasonDF,
rollGSI = test$rollGSI)
ggplot(data = testOutput, aes(x = yday(DateTime), y = WoodyLiveFM))+
geom_line()+
geom_vline(data = seasonDF, color = "green", aes(xintercept = yday(seasonDF$GreenUpDate)))+
geom_vline(data = seasonDF, color = "red", aes(xintercept = yday(seasonDF$SenesenceDate)))+
facet_wrap(~Year)
#workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$WoodyLiveFM <- mapply(cumsumHours, workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$WoodyLiveFM, workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$diffGSI, 200)
workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate& workingDF$Year == i),]$WoodyLiveFM <- 80 * cumsum(workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate  & workingDF$Year == i),]$diffGSI ) + 80
testOutput <- liveFuelMoistures(DateTime = test$DateTime,
GreenupDates = seasonDF,
rollGSI = test$rollGSI)
ggplot(data = testOutput, aes(x = yday(DateTime), y = WoodyLiveFM))+
geom_line()+
geom_vline(data = seasonDF, color = "green", aes(xintercept = yday(seasonDF$GreenUpDate)))+
geom_vline(data = seasonDF, color = "red", aes(xintercept = yday(seasonDF$SenesenceDate)))+
facet_wrap(~Year)
liveFuelMoistures <- function(DateTime, GreenupDates, rollGSI){
workingDF <- data.frame(DateTime,Year = year(DateTime),rollGSI)
workingDF$diffGSI <- c(0,diff(workingDF$rollGSI))
workingDF$WoodyLiveFM <- NA
workingDF$HerbaceousLiveFM <- NA
cumsumHours <- function(FuelMoisture, diffGSI, Peak){
returnValues <- NA
if(FuelMoisture + diffGSI < Peak & !is.na(diffGSI) & !is.na(FuelMoisture))
returnValues <- FuelMoisture + diffGSI
if(FuelMoisture + diffGSI >= Peak & !is.na(FuelMoisture) & !is.na(diffGSI))
returnValues <- Peak
if(!is.na(diffGSI))
returnValues <- NA
return(returnValues)
}
for(i in unique(GreenupDates$Year)){
print(i)
minDateDF <- filter(workingDF, Year == i) %>% summarise(minDate = min(DateTime, na.rm = T))
maxDateDF <- filter(workingDF, Year == i) %>% summarise(maxDate = max(DateTime, na.rm = T))
minDate <- minDateDF[1,1]
maxDate <- maxDateDF[1,1]
GUDate <- GreenupDates$GreenUpDate[GreenupDates$Year == i]
SDate <- GreenupDates$SenesenceDate[GreenupDates$Year == i]
workingDF[which(workingDF$DateTime >= minDate & workingDF$DateTime <= GUDate & workingDF$DateTime <= SDate & workingDF$Year == i ),]$WoodyLiveFM <- 80
workingDF[which(workingDF$DateTime >= SDate  & workingDF$Year == i),]$WoodyLiveFM <- 80
#workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$WoodyLiveFM <- mapply(cumsumHours, workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$WoodyLiveFM, workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$diffGSI, 200)
workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate& workingDF$Year == i),]$WoodyLiveFM <- 80 * cumsum(workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate  & workingDF$Year == i),]$diffGSI ) + 80
workingDF[which(workingDF$DateTime < GUDate  & workingDF$Year == i),]$HerbaceousLiveFM <- 30
workingDF[which(workingDF$DateTime > SDate  & workingDF$Year == i),]$HerbaceousLiveFM <- 30
GUDate <- NA
SDate <- NA
}
return(workingDF)
}
testOutput <- liveFuelMoistures(DateTime = test$DateTime,
GreenupDates = seasonDF,
rollGSI = test$rollGSI)
ggplot(data = testOutput, aes(x = yday(DateTime), y = WoodyLiveFM))+
geom_line()+
geom_vline(data = seasonDF, color = "green", aes(xintercept = yday(seasonDF$GreenUpDate)))+
geom_vline(data = seasonDF, color = "red", aes(xintercept = yday(seasonDF$SenesenceDate)))+
facet_wrap(~Year)
liveFuelMoistures <- function(DateTime, GreenupDates, rollGSI){
workingDF <- data.frame(DateTime,Year = year(DateTime),rollGSI)
workingDF$diffGSI <- c(0,diff(workingDF$rollGSI))
workingDF$WoodyLiveFM <- NA
workingDF$HerbaceousLiveFM <- NA
cumsumHours <- function(FuelMoisture, diffGSI, Peak){
returnValues <- NA
if(FuelMoisture + diffGSI < Peak & !is.na(diffGSI) & !is.na(FuelMoisture))
returnValues <- FuelMoisture + diffGSI
if(FuelMoisture + diffGSI >= Peak & !is.na(FuelMoisture) & !is.na(diffGSI))
returnValues <- Peak
if(!is.na(diffGSI))
returnValues <- NA
return(returnValues)
}
minWoody <- 50
maxWoody <- 200
minHerb <- 30
maxHerb <- 250
for(i in unique(GreenupDates$Year)){
print(i)
minDateDF <- filter(workingDF, Year == i) %>% summarise(minDate = min(DateTime, na.rm = T))
maxDateDF <- filter(workingDF, Year == i) %>% summarise(maxDate = max(DateTime, na.rm = T))
minDate <- minDateDF[1,1]
maxDate <- maxDateDF[1,1]
GUDate <- GreenupDates$GreenUpDate[GreenupDates$Year == i]
SDate <- GreenupDates$SenesenceDate[GreenupDates$Year == i]
workingDF[which(workingDF$DateTime >= minDate & workingDF$DateTime <= GUDate & workingDF$DateTime <= SDate & workingDF$Year == i ),]$WoodyLiveFM <- minWoody
workingDF[which(workingDF$DateTime >= SDate  & workingDF$Year == i),]$WoodyLiveFM <- minWoody
#workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$WoodyLiveFM <- mapply(cumsumHours, workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$WoodyLiveFM, workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$diffGSI, 200)
workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate& workingDF$Year == i),]$WoodyLiveFM <- 300 * cumsum(workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate  & workingDF$Year == i),]$diffGSI ) + minWoody
workingDF[which(workingDF$DateTime < GUDate  & workingDF$Year == i),]$HerbaceousLiveFM <- 30
workingDF[which(workingDF$DateTime > SDate  & workingDF$Year == i),]$HerbaceousLiveFM <- 30
GUDate <- NA
SDate <- NA
}
return(workingDF)
}
testOutput <- liveFuelMoistures(DateTime = test$DateTime,
GreenupDates = seasonDF,
rollGSI = test$rollGSI)
ggplot(data = testOutput, aes(x = yday(DateTime), y = WoodyLiveFM))+
geom_line()+
geom_vline(data = seasonDF, color = "green", aes(xintercept = yday(seasonDF$GreenUpDate)))+
geom_vline(data = seasonDF, color = "red", aes(xintercept = yday(seasonDF$SenesenceDate)))+
facet_wrap(~Year)
cumsumHours <- function(Minimum, diffGSI, Peak){
returnValues <- NA
if(300 * diffGSI + Minimum < Peak & !is.na(diffGSI) & !is.na(FuelMoisture))
returnValues <- 300 * diffGSI + Minimum
if(300 * diffGSI + Minimum >= Peak & !is.na(FuelMoisture) & !is.na(diffGSI))
returnValues <- Peak
if(!is.na(diffGSI))
returnValues <- NA
if(300 * diffGSI + Minimum < Minimum & !is.na(diffGSI) & !is.na(FuelMoisture))
returnValues <- Minimum
return(returnValues)
}
liveFuelMoistures <- function(DateTime, GreenupDates, rollGSI){
workingDF <- data.frame(DateTime,Year = year(DateTime),rollGSI)
workingDF$diffGSI <- c(0,diff(workingDF$rollGSI))
workingDF$WoodyLiveFM <- NA
workingDF$HerbaceousLiveFM <- NA
cumsumHours <- function(Minimum, diffGSI, Peak){
returnValues <- NA
if(300 * diffGSI + Minimum < Peak & !is.na(diffGSI) & !is.na(FuelMoisture))
returnValues <- 300 * diffGSI + Minimum
if(300 * diffGSI + Minimum >= Peak & !is.na(FuelMoisture) & !is.na(diffGSI))
returnValues <- Peak
if(!is.na(diffGSI))
returnValues <- NA
if(300 * diffGSI + Minimum < Minimum & !is.na(diffGSI) & !is.na(FuelMoisture))
returnValues <- Minimum
return(returnValues)
}
minWoody <- 50
maxWoody <- 200
minHerb <- 30
maxHerb <- 250
for(i in unique(GreenupDates$Year)){
print(i)
minDateDF <- filter(workingDF, Year == i) %>% summarise(minDate = min(DateTime, na.rm = T))
maxDateDF <- filter(workingDF, Year == i) %>% summarise(maxDate = max(DateTime, na.rm = T))
minDate <- minDateDF[1,1]
maxDate <- maxDateDF[1,1]
GUDate <- GreenupDates$GreenUpDate[GreenupDates$Year == i]
SDate <- GreenupDates$SenesenceDate[GreenupDates$Year == i]
workingDF[which(workingDF$DateTime >= minDate & workingDF$DateTime <= GUDate & workingDF$DateTime <= SDate & workingDF$Year == i ),]$WoodyLiveFM <- minWoody
workingDF[which(workingDF$DateTime >= SDate  & workingDF$Year == i),]$WoodyLiveFM <- minWoody
workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$WoodyLiveFM <- mapply(cumsumHours, minWoody,workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate & workingDF$Year == i),]$WoodyLiveFM, workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$diffGSI, maxWoody)
#workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate& workingDF$Year == i),]$WoodyLiveFM <- 300 * cumsum(workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate  & workingDF$Year == i),]$diffGSI ) + minWoody
workingDF[which(workingDF$DateTime < GUDate  & workingDF$Year == i),]$HerbaceousLiveFM <- 30
workingDF[which(workingDF$DateTime > SDate  & workingDF$Year == i),]$HerbaceousLiveFM <- 30
GUDate <- NA
SDate <- NA
}
return(workingDF)
}
testOutput <- liveFuelMoistures(DateTime = test$DateTime,
GreenupDates = seasonDF,
rollGSI = test$rollGSI)
liveFuelMoistures <- function(DateTime, GreenupDates, rollGSI){
workingDF <- data.frame(DateTime,Year = year(DateTime),rollGSI)
workingDF$diffGSI <- c(0,diff(workingDF$rollGSI))
workingDF$WoodyLiveFM <- NA
workingDF$HerbaceousLiveFM <- NA
cumsumHours <- function(Minimum, diffGSI, Peak){
returnValues <- NA
if(300 * diffGSI + Minimum < Peak & !is.na(diffGSI) & !is.na(FuelMoisture))
returnValues <- 300 * diffGSI + Minimum
if(300 * diffGSI + Minimum >= Peak & !is.na(FuelMoisture) & !is.na(diffGSI))
returnValues <- Peak
if(!is.na(diffGSI))
returnValues <- NA
if(300 * diffGSI + Minimum < Minimum & !is.na(diffGSI) & !is.na(FuelMoisture))
returnValues <- Minimum
return(returnValues)
}
minWoody <- 50
maxWoody <- 200
minHerb <- 30
maxHerb <- 250
for(i in unique(GreenupDates$Year)){
print(i)
minDateDF <- filter(workingDF, Year == i) %>% summarise(minDate = min(DateTime, na.rm = T))
maxDateDF <- filter(workingDF, Year == i) %>% summarise(maxDate = max(DateTime, na.rm = T))
minDate <- minDateDF[1,1]
maxDate <- maxDateDF[1,1]
GUDate <- GreenupDates$GreenUpDate[GreenupDates$Year == i]
SDate <- GreenupDates$SenesenceDate[GreenupDates$Year == i]
workingDF[which(workingDF$DateTime >= minDate & workingDF$DateTime <= GUDate & workingDF$DateTime <= SDate & workingDF$Year == i ),]$WoodyLiveFM <- minWoody
workingDF[which(workingDF$DateTime >= SDate  & workingDF$Year == i),]$WoodyLiveFM <- minWoody
workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$WoodyLiveFM <- mapply(cumsumHours,
minWoody,
workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$diffGSI,
maxWoody)
#workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate& workingDF$Year == i),]$WoodyLiveFM <- 300 * cumsum(workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate  & workingDF$Year == i),]$diffGSI ) + minWoody
workingDF[which(workingDF$DateTime < GUDate  & workingDF$Year == i),]$HerbaceousLiveFM <- 30
workingDF[which(workingDF$DateTime > SDate  & workingDF$Year == i),]$HerbaceousLiveFM <- 30
GUDate <- NA
SDate <- NA
}
return(workingDF)
}
testOutput <- liveFuelMoistures(DateTime = test$DateTime,
GreenupDates = seasonDF,
rollGSI = test$rollGSI)
cumsumHours <- function(Minimum, diffGSI, Peak){
returnValues <- NA
if(300 * diffGSI + Minimum < Peak & !is.na(diffGSI))
returnValues <- 300 * diffGSI + Minimum
if(300 * diffGSI + Minimum >= Peak & !is.na(diffGSI))
returnValues <- Peak
if(!is.na(diffGSI))
returnValues <- NA
if(300 * diffGSI + Minimum < Minimum & !is.na(diffGSI))
returnValues <- Minimum
return(returnValues)
}
liveFuelMoistures <- function(DateTime, GreenupDates, rollGSI){
workingDF <- data.frame(DateTime,Year = year(DateTime),rollGSI)
workingDF$diffGSI <- c(0,diff(workingDF$rollGSI))
workingDF$WoodyLiveFM <- NA
workingDF$HerbaceousLiveFM <- NA
cumsumHours <- function(Minimum, diffGSI, Peak){
returnValues <- NA
if(300 * diffGSI + Minimum < Peak & !is.na(diffGSI))
returnValues <- 300 * diffGSI + Minimum
if(300 * diffGSI + Minimum >= Peak & !is.na(diffGSI))
returnValues <- Peak
if(!is.na(diffGSI))
returnValues <- NA
if(300 * diffGSI + Minimum < Minimum & !is.na(diffGSI))
returnValues <- Minimum
return(returnValues)
}
minWoody <- 50
maxWoody <- 200
minHerb <- 30
maxHerb <- 250
for(i in unique(GreenupDates$Year)){
print(i)
minDateDF <- filter(workingDF, Year == i) %>% summarise(minDate = min(DateTime, na.rm = T))
maxDateDF <- filter(workingDF, Year == i) %>% summarise(maxDate = max(DateTime, na.rm = T))
minDate <- minDateDF[1,1]
maxDate <- maxDateDF[1,1]
GUDate <- GreenupDates$GreenUpDate[GreenupDates$Year == i]
SDate <- GreenupDates$SenesenceDate[GreenupDates$Year == i]
workingDF[which(workingDF$DateTime >= minDate & workingDF$DateTime <= GUDate & workingDF$DateTime <= SDate & workingDF$Year == i ),]$WoodyLiveFM <- minWoody
workingDF[which(workingDF$DateTime >= SDate  & workingDF$Year == i),]$WoodyLiveFM <- minWoody
workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$WoodyLiveFM <- mapply(cumsumHours,
minWoody,
workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate),]$diffGSI,
maxWoody)
#workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate& workingDF$Year == i),]$WoodyLiveFM <- 300 * cumsum(workingDF[which(workingDF$DateTime >= GUDate & workingDF$DateTime <= SDate  & workingDF$Year == i),]$diffGSI ) + minWoody
workingDF[which(workingDF$DateTime < GUDate  & workingDF$Year == i),]$HerbaceousLiveFM <- 30
workingDF[which(workingDF$DateTime > SDate  & workingDF$Year == i),]$HerbaceousLiveFM <- 30
GUDate <- NA
SDate <- NA
}
return(workingDF)
}
testOutput <- liveFuelMoistures(DateTime = test$DateTime,
GreenupDates = seasonDF,
rollGSI = test$rollGSI)
ggplot(data = testOutput, aes(x = yday(DateTime), y = WoodyLiveFM))+
geom_line()+
geom_vline(data = seasonDF, color = "green", aes(xintercept = yday(seasonDF$GreenUpDate)))+
geom_vline(data = seasonDF, color = "red", aes(xintercept = yday(seasonDF$SenesenceDate)))+
facet_wrap(~Year)
?normalizePath
runApp('FireWeatherExplorer')
?StationID
StationID
test_that("readInWeather fails if StationID is invalid", {
expect_error(readInWeather(StationID = "ABCD1", County = "Larimer", Start = 2010, End = 2011))
})
test_that("readInWeather fails if end is greater than start year", {
expect_error(readInWeather(StationID = "RFRC2", County = "Larimer",Start = 2015, End = 2011),"Start year must be less than end year.")
})
test_that("readInWeather fails with non-numeric years - end", {
expect_error(readInWeather(StationID = "RFRC2", County = "Larimer",Start = 2015, End = "ABC"),"End year must be a numeric value. Example: as.numeric(1997)")
})
readInWeather <- function(StationID, County, Start, End)
{
#
# Error catching. Check to make sure start and end are useful.
#
if(!is.numeric(Start)){
stop("Start year must be a numeric value. Example: as.numeric(1997)")
}
if(!is.numeric(End)){
stop("End year must be a numeric value. Example: as.numeric(1997)")
}
if(Start > End)
stop("Start year must be less than end year.")
#
# Formatting start and end date strings per what the Mesowest API requires.
#
StartDate_formatted <<- paste(Start,"01","01","1200",sep = "")
EndDate_formatted <<- paste(End,"12","12","2300",sep = "")
print(paste("Retrieving data for: ", StationID," (",StartDate_formatted,"-",EndDate_formatted, ")", sep = ""), quote = FALSE)
#
# Pass variables to mesowest app
#
downloadedWeather <- mesowest::mw(service = 'timeseries',
stid = StationID,
start = StartDate_formatted,
end = EndDate_formatted,
units="ENGLISH")
return(downloadedWeather)
}
test_that("readInWeather fails with non-numeric years - start", {
expect_error(readInWeather(StationID = "RFRC2", County = "Larimer",Start = "ABC",End = 2015),"Start year must be a numeric value. Example: as.numeric(1997)")
})
expect_error(readInWeather(StationID = "RFRC2", County = "Larimer",Start = "ABC",End = 2015))
test_that("readInWeather fails with non-numeric years - start", {
expect_error(readInWeather(StationID = "RFRC2", County = "Larimer",Start = "ABC",End = 2015))
})
test_that("readInWeather fails with non-numeric years - end", {
expect_error(readInWeather(StationID = "RFRC2", County = "Larimer",Start = 2015, End = "ABC"),"End year must be a numeric value. Example: as.numeric(1997)")
})
test_that("readInWeather fails with non-numeric years - end", {
expect_error(readInWeather(StationID = "RFRC2", County = "Larimer",Start = 2015, End = "ABC"))
})
test_that("readInWeather fails if end is greater than start year", {
expect_error(readInWeather(StationID = "RFRC2", County = "Larimer",Start = 2015, End = 2011),"Start year must be less than end year.")
})
test_that("readInWeather fails if StationID is invalid", {
expect_error(readInWeather(StationID = "ABCD1", County = "Larimer", Start = 2010, End = 2011))
})
runApp()
shiny::runApp()
