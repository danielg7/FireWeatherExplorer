"Temp" = weatherDB$STATION$OBSERVATIONS$air_temp_set_1,
"RH" = weatherDB$STATION$OBSERVATIONS$relative_humidity_set_1)}
# Clean Data
names(newWxDF) <- c("DateTime","FuelMoisture","Wind_Direction","Wind_Speed","Temp","RH")
newWxDF$RH <- as.numeric(as.character(newWxDF$RH))
newWxDF$DateTime <- ymd_hms(newWxDF$DateTime, tz = weatherDB$STATION$TIMEZONE)
newWxDF$Hour <- lubridate::hour(newWxDF$DateTime)
newWxDF$Month <- lubridate::month(newWxDF$DateTime)
newWxDF$Year <- lubridate::year(newWxDF$DateTime)
newWxDF$DayOfYear <<- as.Date(paste("2000-",format(newWxDF$DateTime, "%j")), "%Y-%j")
return(newWxDF)
}
fxn_weatherCleaner(goodWx)
length(goodWx$STATION$OBSERVATIONS$date_time)
nrow(goodWx$STATION$OBSERVATIONS$date_time)
goodWx$STATION$OBSERVATIONS$date_time[[1]]
length(goodWx$STATION$OBSERVATIONS$date_time[[1]])
length(badWx$STATION$OBSERVATIONS$date_time[[1]])
fxn_weatherCleaner <- function(weatherDB){
# Quick tests of completeness
if(length(weatherDB$STATION$OBSERVATIONS$date_time) == 0){
showNotification(paste("No data in this station for this period of record!",StartDate_formatted,"-",EndDate_formatted,sep=""))
}
if(weatherDB$SUMMARY$NUMBER_OF_OBJECTS == 0){
showNotification("No data in this station for this period of record!")
}
# Populate dataframe
if("fuel_moisture_set_1" %in% names(weatherDB$STATION$OBSERVATIONS)){
newWxDF <- data.frame("Date_Time" = weatherDB$STATION$OBSERVATIONS$date_time[[1]],
"Fuel_Moisture" = weatherDB$STATION$OBSERVATIONS$fuel_moisture_set_1,
"Wind_Direction" = weatherDB$STATION$OBSERVATIONS$wind_cardinal_direction_set_1d,
"Wind_Speed" = weatherDB$STATION$OBSERVATIONS$wind_speed_set_1,
"Temp" = weatherDB$STATION$OBSERVATIONS$air_temp_set_1,
"RH" = weatherDB$STATION$OBSERVATIONS$relative_humidity_set_1)}
if(!"fuel_moisture_set_1" %in% names(weatherDB$STATION$OBSERVATIONS)){
# showNotification("No fuel moisture data available!")
newWxDF <- data.frame("Date_Time" = weatherDB$STATION$OBSERVATIONS$date_time[[1]],
"FMC" = weatherDB$STATION$OBSERVATIONS$fuel_moisture_set_1,
"Wind_Direction" = weatherDB$STATION$OBSERVATIONS$wind_cardinal_direction_set_1d,
"Wind_Speed" = weatherDB$STATION$OBSERVATIONS$wind_speed_set_1,
"Temp" = weatherDB$STATION$OBSERVATIONS$air_temp_set_1,
"RH" = weatherDB$STATION$OBSERVATIONS$relative_humidity_set_1)}
# Clean Data
names(newWxDF) <- c("DateTime","FuelMoisture","Wind_Direction","Wind_Speed","Temp","RH")
newWxDF$RH <- as.numeric(as.character(newWxDF$RH))
newWxDF$DateTime <- ymd_hms(newWxDF$DateTime, tz = "UTC")
attributes(newWxDF$DateTime)$tzone <-  weatherDB$STATION$TIMEZONE
newWxDF$Hour <- lubridate::hour(newWxDF$DateTime)
newWxDF$Month <- lubridate::month(newWxDF$DateTime)
newWxDF$Year <- lubridate::year(newWxDF$DateTime)
newWxDF$DayOfYear <<- as.Date(paste("2000-",format(newWxDF$DateTime, "%j")), "%Y-%j")
return(newWxDF)
}
fxn_weatherCleaner(goodWx)
fxn_weatherCleaner(badWx)
goodWx$STATION$OBSERVATIONS$date_time
fxn_weatherCleaner(goodWx)
goodWx$STATION$OBSERVATIONS$date_time[[1]]
goodWx$STATION$OBSERVATIONS$date_time
goodWx$STATION$OBSERVATIONS$date_time[1]
fxn_weatherCleaner <- function(weatherDB){
# Quick tests of completeness
if(length(weatherDB$STATION$OBSERVATIONS$date_time) == 0){
showNotification(paste("No data in this station for this period of record!",StartDate_formatted,"-",EndDate_formatted,sep=""))
}
if(weatherDB$SUMMARY$NUMBER_OF_OBJECTS == 0){
showNotification("No data in this station for this period of record!")
}
# Populate dataframe
if("fuel_moisture_set_1" %in% names(weatherDB$STATION$OBSERVATIONS)){
newWxDF <- data.frame("Date_Time" = weatherDB$STATION$OBSERVATIONS$date_time[1],
"Fuel_Moisture" = weatherDB$STATION$OBSERVATIONS$fuel_moisture_set_1,
"Wind_Direction" = weatherDB$STATION$OBSERVATIONS$wind_cardinal_direction_set_1d,
"Wind_Speed" = weatherDB$STATION$OBSERVATIONS$wind_speed_set_1,
"Temp" = weatherDB$STATION$OBSERVATIONS$air_temp_set_1,
"RH" = weatherDB$STATION$OBSERVATIONS$relative_humidity_set_1)}
if(!"fuel_moisture_set_1" %in% names(weatherDB$STATION$OBSERVATIONS)){
# showNotification("No fuel moisture data available!")
newWxDF <- data.frame("Date_Time" = weatherDB$STATION$OBSERVATIONS$date_time[[1]],
"FMC" = weatherDB$STATION$OBSERVATIONS$fuel_moisture_set_1,
"Wind_Direction" = weatherDB$STATION$OBSERVATIONS$wind_cardinal_direction_set_1d,
"Wind_Speed" = weatherDB$STATION$OBSERVATIONS$wind_speed_set_1,
"Temp" = weatherDB$STATION$OBSERVATIONS$air_temp_set_1,
"RH" = weatherDB$STATION$OBSERVATIONS$relative_humidity_set_1)}
# Clean Data
names(newWxDF) <- c("DateTime","FuelMoisture","Wind_Direction","Wind_Speed","Temp","RH")
newWxDF$RH <- as.numeric(as.character(newWxDF$RH))
newWxDF$DateTime <- ymd_hms(newWxDF$DateTime, tz = "UTC")
attributes(newWxDF$DateTime)$tzone <-  weatherDB$STATION$TIMEZONE
newWxDF$Hour <- lubridate::hour(newWxDF$DateTime)
newWxDF$Month <- lubridate::month(newWxDF$DateTime)
newWxDF$Year <- lubridate::year(newWxDF$DateTime)
newWxDF$DayOfYear <<- as.Date(paste("2000-",format(newWxDF$DateTime, "%j")), "%Y-%j")
return(newWxDF)
}
fxn_weatherCleaner(goodWx)
fxn_weatherCleaner(badWx)
fxn_weatherCleaner <- function(weatherDB){
# Quick tests of completeness
if(length(weatherDB$STATION$OBSERVATIONS$date_time) == 0){
showNotification(paste("No data in this station for this period of record!",StartDate_formatted,"-",EndDate_formatted,sep=""))
}
if(weatherDB$SUMMARY$NUMBER_OF_OBJECTS == 0){
showNotification("No data in this station for this period of record!")
}
# Populate dataframe
if("fuel_moisture_set_1" %in% names(weatherDB$STATION$OBSERVATIONS)){
newWxDF <- data.frame("Date_Time" = weatherDB$STATION$OBSERVATIONS$date_time[[1]],
"Fuel_Moisture" = weatherDB$STATION$OBSERVATIONS$fuel_moisture_set_1,
"Wind_Direction" = weatherDB$STATION$OBSERVATIONS$wind_cardinal_direction_set_1d,
"Wind_Speed" = weatherDB$STATION$OBSERVATIONS$wind_speed_set_1,
"Temp" = weatherDB$STATION$OBSERVATIONS$air_temp_set_1,
"RH" = weatherDB$STATION$OBSERVATIONS$relative_humidity_set_1)}
if(!"fuel_moisture_set_1" %in% names(weatherDB$STATION$OBSERVATIONS)){
# showNotification("No fuel moisture data available!")
newWxDF <- data.frame("Date_Time" = weatherDB$STATION$OBSERVATIONS$date_time[[1]],
"FMC" = weatherDB$STATION$OBSERVATIONS$fuel_moisture_set_1,
"Wind_Direction" = weatherDB$STATION$OBSERVATIONS$wind_cardinal_direction_set_1d,
"Wind_Speed" = weatherDB$STATION$OBSERVATIONS$wind_speed_set_1,
"Temp" = weatherDB$STATION$OBSERVATIONS$air_temp_set_1,
"RH" = weatherDB$STATION$OBSERVATIONS$relative_humidity_set_1)}
# Clean Data
names(newWxDF) <- c("DateTime","FuelMoisture","Wind_Direction","Wind_Speed","Temp","RH")
newWxDF$RH <- as.numeric(as.character(newWxDF$RH))
newWxDF$DateTime <- ymd_hms(newWxDF$DateTime, tz = "UTC")
attributes(newWxDF$DateTime)$tzone <-  weatherDB$STATION$TIMEZONE
newWxDF$Hour <- lubridate::hour(newWxDF$DateTime)
newWxDF$Month <- lubridate::month(newWxDF$DateTime)
newWxDF$Year <- lubridate::year(newWxDF$DateTime)
newWxDF$DayOfYear <<- as.Date(paste("2000-",format(newWxDF$DateTime, "%j")), "%Y-%j")
return(newWxDF)
}
fxn_weatherCleaner(goodWx)
fxn_weatherCleaner(badWx)
fxn_weatherCleaner(goodWx)
fxn_weatherCleaner <- function(weatherDB){
# Quick tests of completeness
print("Testing for completeness...", quote = FALSE)
if(length(weatherDB$STATION$OBSERVATIONS$date_time) == 0){
showNotification(paste("No data in this station for this period of record!",StartDate_formatted,"-",EndDate_formatted,sep=""))
}
if(weatherDB$SUMMARY$NUMBER_OF_OBJECTS == 0){
showNotification("No data in this station for this period of record!")
}
# Populate dataframe
if("fuel_moisture_set_1" %in% names(weatherDB$STATION$OBSERVATIONS)){
newWxDF <- data.frame("Date_Time" = weatherDB$STATION$OBSERVATIONS$date_time[[1]],
"Fuel_Moisture" = weatherDB$STATION$OBSERVATIONS$fuel_moisture_set_1,
"Wind_Direction" = weatherDB$STATION$OBSERVATIONS$wind_cardinal_direction_set_1d,
"Wind_Speed" = weatherDB$STATION$OBSERVATIONS$wind_speed_set_1,
"Temp" = weatherDB$STATION$OBSERVATIONS$air_temp_set_1,
"RH" = weatherDB$STATION$OBSERVATIONS$relative_humidity_set_1)}
if(!"fuel_moisture_set_1" %in% names(weatherDB$STATION$OBSERVATIONS)){
# showNotification("No fuel moisture data available!")
newWxDF <- data.frame("Date_Time" = weatherDB$STATION$OBSERVATIONS$date_time[[1]],
"FMC" = weatherDB$STATION$OBSERVATIONS$fuel_moisture_set_1,
"Wind_Direction" = weatherDB$STATION$OBSERVATIONS$wind_cardinal_direction_set_1d,
"Wind_Speed" = weatherDB$STATION$OBSERVATIONS$wind_speed_set_1,
"Temp" = weatherDB$STATION$OBSERVATIONS$air_temp_set_1,
"RH" = weatherDB$STATION$OBSERVATIONS$relative_humidity_set_1)}
# Clean Data
print("Cleaning data...", quote = FALSE)
names(newWxDF) <- c("DateTime","FuelMoisture","Wind_Direction","Wind_Speed","Temp","RH")
newWxDF$RH <- as.numeric(as.character(newWxDF$RH))
print("Adjusting Time...", quote = FALSE)
newWxDF$DateTime <- ymd_hms(newWxDF$DateTime, tz = "UTC")
attributes(newWxDF$DateTime)$tzone <-  weatherDB$STATION$TIMEZONE
newWxDF$Hour <- lubridate::hour(newWxDF$DateTime)
newWxDF$Month <- lubridate::month(newWxDF$DateTime)
newWxDF$Year <- lubridate::year(newWxDF$DateTime)
newWxDF$DayOfYear <<- as.Date(paste("2000-",format(newWxDF$DateTime, "%j")), "%Y-%j")
return(newWxDF)
}
fxn_weatherCleaner(goodWx)
fxn_weatherCleaner <- function(weatherDB){
# Quick tests of completeness
print("Testing for completeness...", quote = FALSE)
if(length(weatherDB$STATION$OBSERVATIONS$date_time) == 0){
showNotification(paste("No data in this station for this period of record!",StartDate_formatted,"-",EndDate_formatted,sep=""))
}
if(weatherDB$SUMMARY$NUMBER_OF_OBJECTS == 0){
showNotification("No data in this station for this period of record!")
}
# Populate dataframe
if("fuel_moisture_set_1" %in% names(weatherDB$STATION$OBSERVATIONS)){
newWxDF <- data.frame("Date_Time" = weatherDB$STATION$OBSERVATIONS$date_time,
"Fuel_Moisture" = weatherDB$STATION$OBSERVATIONS$fuel_moisture_set_1,
"Wind_Direction" = weatherDB$STATION$OBSERVATIONS$wind_cardinal_direction_set_1d,
"Wind_Speed" = weatherDB$STATION$OBSERVATIONS$wind_speed_set_1,
"Temp" = weatherDB$STATION$OBSERVATIONS$air_temp_set_1,
"RH" = weatherDB$STATION$OBSERVATIONS$relative_humidity_set_1)}
if(!"fuel_moisture_set_1" %in% names(weatherDB$STATION$OBSERVATIONS)){
# showNotification("No fuel moisture data available!")
newWxDF <- data.frame("Date_Time" = weatherDB$STATION$OBSERVATIONS$date_time[[1]],
"FMC" = weatherDB$STATION$OBSERVATIONS$fuel_moisture_set_1,
"Wind_Direction" = weatherDB$STATION$OBSERVATIONS$wind_cardinal_direction_set_1d,
"Wind_Speed" = weatherDB$STATION$OBSERVATIONS$wind_speed_set_1,
"Temp" = weatherDB$STATION$OBSERVATIONS$air_temp_set_1,
"RH" = weatherDB$STATION$OBSERVATIONS$relative_humidity_set_1)}
# Clean Data
print("Cleaning data...", quote = FALSE)
names(newWxDF) <- c("DateTime","FuelMoisture","Wind_Direction","Wind_Speed","Temp","RH")
newWxDF$RH <- as.numeric(as.character(newWxDF$RH))
print("Adjusting Time...", quote = FALSE)
newWxDF$DateTime <- ymd_hms(newWxDF$DateTime, tz = "UTC")
attributes(newWxDF$DateTime)$tzone <-  weatherDB$STATION$TIMEZONE
newWxDF$Hour <- lubridate::hour(newWxDF$DateTime)
newWxDF$Month <- lubridate::month(newWxDF$DateTime)
newWxDF$Year <- lubridate::year(newWxDF$DateTime)
newWxDF$DayOfYear <<- as.Date(paste("2000-",format(newWxDF$DateTime, "%j")), "%Y-%j")
return(newWxDF)
}
fxn_weatherCleaner(goodWx)
goodWx$STATION$OBSERVATIONS$date_time[1]
nrow(goodWx$STATION$OBSERVATIONS$date_time[1])
length(goodWx$STATION$OBSERVATIONS$date_time[1])
length(goodWx$STATION$OBSERVATIONS$date_time[[1]])
length(goodWx$STATION$OBSERVATIONS$fuel_moisture_set_1[[1]])
length(goodWx$STATION$OBSERVATIONS$fuel_moisture_set_1)
length(goodWx$STATION$OBSERVATIONS$fuel_moisture_set_1[1])
nrow(goodWx$STATION$OBSERVATIONS$fuel_moisture_set_1[1])
fxn_weatherCleaner <- function(weatherDB){
# Quick tests of completeness
print("Testing for completeness...", quote = FALSE)
if(length(weatherDB$STATION$OBSERVATIONS$date_time) == 0){
showNotification(paste("No data in this station for this period of record!",StartDate_formatted,"-",EndDate_formatted,sep=""))
}
if(weatherDB$SUMMARY$NUMBER_OF_OBJECTS == 0){
showNotification("No data in this station for this period of record!")
}
# Populate dataframe
if("fuel_moisture_set_1" %in% names(weatherDB$STATION$OBSERVATIONS)){
newWxDF <- data.frame("Date_Time" = weatherDB$STATION$OBSERVATIONS$date_time[[1]],
"Fuel_Moisture" = weatherDB$STATION$OBSERVATIONS$fuel_moisture_set_1,
"Wind_Direction" = weatherDB$STATION$OBSERVATIONS$wind_cardinal_direction_set_1d,
"Wind_Speed" = weatherDB$STATION$OBSERVATIONS$wind_speed_set_1,
"Temp" = weatherDB$STATION$OBSERVATIONS$air_temp_set_1,
"RH" = weatherDB$STATION$OBSERVATIONS$relative_humidity_set_1)}
if(!"fuel_moisture_set_1" %in% names(weatherDB$STATION$OBSERVATIONS)){
# showNotification("No fuel moisture data available!")
newWxDF <- data.frame("Date_Time" = weatherDB$STATION$OBSERVATIONS$date_time[[1]],
"Fuel_Moisture" = rep(NA, length(weatherDB$STATION$OBSERVATIONS$date_time[[1]])),
"Wind_Direction" = weatherDB$STATION$OBSERVATIONS$wind_cardinal_direction_set_1d,
"Wind_Speed" = weatherDB$STATION$OBSERVATIONS$wind_speed_set_1,
"Temp" = weatherDB$STATION$OBSERVATIONS$air_temp_set_1,
"RH" = weatherDB$STATION$OBSERVATIONS$relative_humidity_set_1)}
# Clean Data
print("Cleaning data...", quote = FALSE)
names(newWxDF) <- c("DateTime","FuelMoisture","Wind_Direction","Wind_Speed","Temp","RH")
newWxDF$RH <- as.numeric(as.character(newWxDF$RH))
print("Adjusting Time...", quote = FALSE)
newWxDF$DateTime <- ymd_hms(newWxDF$DateTime, tz = "UTC")
attributes(newWxDF$DateTime)$tzone <-  weatherDB$STATION$TIMEZONE
newWxDF$Hour <- lubridate::hour(newWxDF$DateTime)
newWxDF$Month <- lubridate::month(newWxDF$DateTime)
newWxDF$Year <- lubridate::year(newWxDF$DateTime)
newWxDF$DayOfYear <<- as.Date(paste("2000-",format(newWxDF$DateTime, "%j")), "%Y-%j")
return(newWxDF)
}
fxn_weatherCleaner(goodWx)
fxn_weatherCleaner(badWx)
fxn_weatherCleaner(goodWx)
fxn_weatherCleaner <- function(weatherDB){
# Quick tests of completeness
print("Testing for completeness...", quote = FALSE)
if(length(weatherDB$STATION$OBSERVATIONS$date_time) == 0){
showNotification(paste("No data in this station for this period of record!",StartDate_formatted,"-",EndDate_formatted,sep=""))
}
if(weatherDB$SUMMARY$NUMBER_OF_OBJECTS == 0){
showNotification("No data in this station for this period of record!")
}
# Populate dataframe
if("fuel_moisture_set_1" %in% names(weatherDB$STATION$OBSERVATIONS)){
newWxDF <- data.frame("Date_Time" = weatherDB$STATION$OBSERVATIONS$date_time[[1]],
"Fuel_Moisture" = weatherDB$STATION$OBSERVATIONS$fuel_moisture_set_1,
"Wind_Direction" = weatherDB$STATION$OBSERVATIONS$wind_cardinal_direction_set_1d,
"Wind_Speed" = weatherDB$STATION$OBSERVATIONS$wind_speed_set_1,
"Temp" = weatherDB$STATION$OBSERVATIONS$air_temp_set_1,
"RH" = weatherDB$STATION$OBSERVATIONS$relative_humidity_set_1)}
if(!"fuel_moisture_set_1" %in% names(weatherDB$STATION$OBSERVATIONS)){
# showNotification("No fuel moisture data available!")
newWxDF <- data.frame("Date_Time" = weatherDB$STATION$OBSERVATIONS$date_time[[1]],
"Fuel_Moisture" = rep(NA, length(weatherDB$STATION$OBSERVATIONS$date_time[[1]])),
"Wind_Direction" = weatherDB$STATION$OBSERVATIONS$wind_cardinal_direction_set_1d,
"Wind_Speed" = weatherDB$STATION$OBSERVATIONS$wind_speed_set_1,
"Temp" = weatherDB$STATION$OBSERVATIONS$air_temp_set_1,
"RH" = weatherDB$STATION$OBSERVATIONS$relative_humidity_set_1)}
# Clean Data
print("Cleaning data...", quote = FALSE)
names(newWxDF) <- c("DateTime","FuelMoisture","Wind_Direction","Wind_Speed","Temp","RH")
newWxDF$RH <- as.numeric(as.character(newWxDF$RH))
print("Adjusting Time...", quote = FALSE)
newWxDF$DateTime <- ymd_hms(newWxDF$DateTime, tz = "UTC")
attributes(newWxDF$DateTime)$tzone <-  weatherDB$STATION$TIMEZONE
newWxDF$Hour <- lubridate::hour(newWxDF$DateTime)
newWxDF$Month <- lubridate::month(newWxDF$DateTime)
newWxDF$Year <- lubridate::year(newWxDF$DateTime)
newWxDF$DayOfYear <- as.Date(paste("2000-",format(newWxDF$DateTime, "%j")), "%Y-%j")
return(newWxDF)
}
fxn_weatherCleaner(goodWx)
fxn_weatherCleaner(badWx)
goodWxOut <-fxn_weatherCleaner(goodWx)
badWxOut <- fxn_weatherCleaner(badWx)
View(goodWxOut)
View(badWxOut)
fxn_weatherCleaner <- function(weatherDB){
# Quick tests of completeness
print("Testing for completeness...", quote = FALSE)
if(length(weatherDB$STATION$OBSERVATIONS$date_time) == 0){
showNotification(paste("No data in this station for this period of record!",StartDate_formatted,"-",EndDate_formatted,sep=""))
}
if(weatherDB$SUMMARY$NUMBER_OF_OBJECTS == 0){
showNotification("No data in this station for this period of record!")
}
# Populate dataframe
if("fuel_moisture_set_1" %in% names(weatherDB$STATION$OBSERVATIONS)){
newWxDF <- data.frame("Date_Time" = weatherDB$STATION$OBSERVATIONS$date_time[[1]],
"Fuel_Moisture" = weatherDB$STATION$OBSERVATIONS$fuel_moisture_set_1,
"Wind_Direction" = weatherDB$STATION$OBSERVATIONS$wind_cardinal_direction_set_1d,
"Wind_Speed" = weatherDB$STATION$OBSERVATIONS$wind_speed_set_1,
"Temp" = weatherDB$STATION$OBSERVATIONS$air_temp_set_1,
"RH" = weatherDB$STATION$OBSERVATIONS$relative_humidity_set_1)}
if(!"fuel_moisture_set_1" %in% names(weatherDB$STATION$OBSERVATIONS)){
# showNotification("No fuel moisture data available!")
newWxDF <- data.frame("Date_Time" = weatherDB$STATION$OBSERVATIONS$date_time[[1]],
"Fuel_Moisture" = NA,
"Wind_Direction" = weatherDB$STATION$OBSERVATIONS$wind_cardinal_direction_set_1d,
"Wind_Speed" = weatherDB$STATION$OBSERVATIONS$wind_speed_set_1,
"Temp" = weatherDB$STATION$OBSERVATIONS$air_temp_set_1,
"RH" = weatherDB$STATION$OBSERVATIONS$relative_humidity_set_1)}
# Clean Data
print("Cleaning data...", quote = FALSE)
names(newWxDF) <- c("DateTime","FuelMoisture","Wind_Direction","Wind_Speed","Temp","RH")
newWxDF$RH <- as.numeric(as.character(newWxDF$RH))
print("Adjusting Time...", quote = FALSE)
newWxDF$DateTime <- ymd_hms(newWxDF$DateTime, tz = "UTC")
attributes(newWxDF$DateTime)$tzone <-  weatherDB$STATION$TIMEZONE
newWxDF$Hour <- lubridate::hour(newWxDF$DateTime)
newWxDF$Month <- lubridate::month(newWxDF$DateTime)
newWxDF$Year <- lubridate::year(newWxDF$DateTime)
newWxDF$DayOfYear <- as.Date(paste("2000-",format(newWxDF$DateTime, "%j")), "%Y-%j")
return(newWxDF)
}
goodWxOut <-fxn_weatherCleaner(goodWx)
badWxOut <- fxn_weatherCleaner(badWx)
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
?switch
runApp('FireWeatherExplorer')
install.packages("leaflet")
library("leaflet")
?addProviderTiles
?addMarkers
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
?addProviderTiles
runApp('FireWeatherExplorer')
?leaflet
runApp('FireWeatherExplorer')
AllRAWS <- mesowest::mw('metadata',
network=2,
status='ACTIVE')
AllRAWS$STATION$STATE
levels(AllRAWS$STATION$STATE)
unique(AllRAWS$STATION$STATE)
unique(AllRAWS$SUMMARY$RESPONSE_MESSAGE)
View(mwparams)
AllRAWS <- mesowest::mw('metadata',
network=2,
status='ACTIVE', complete = TRUE)
which(AllRAWS$STATION$STATE == "FL", AllRAWS$STATION$COUNTY)
AllRAWS$STATION$COUNTY[which(AllRAWS$STATION$STATE == "FL")]
unique(AllRAWS$STATION$COUNTY[which(AllRAWS$STATION$STATE == "FL")])
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
?selectInput
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
stationMetadata$STATION$PERIOD_OF_RECORD
max(year(stationMetadata$STATION$PERIOD_OF_RECORD))
max(year(ymd_hms(stationMetadata$STATION$PERIOD_OF_RECORD)))
min(year(ymd_hms(stationMetadata$STATION$PERIOD_OF_RECORD)))
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
?datatable
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
?navbarMenu
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
?radioButtons
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp()
runApp('FireWeatherExplorer')
Q
runApp('FireWeatherExplorer')
?conditionalPanel
runApp('FireWeatherExplorer')
install.packages("ggthemes")
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
?scale_x_discrete
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
names(wx_df)
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
View(combinedWx)
?mainPanel
runApp('FireWeatherExplorer')
install.packages("hms")
runApp('FireWeatherExplorer')
str(combinedWx)
?updateTabsetPanel
?tabPanel
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
?geom_rec
?geom_rect
runApp('FireWeatherExplorer')
hour(0)
hour(1)
as.hms(24,0,0)
as.hms(0,0,24)
as.hms(59,59,23)
as.hms(23)
as.hms(23,10)
as.hms(1,2,3)
as.hms(3,2,1)
as.hms(3,12)
as.hms(3,12,5)
as.hms(60,)
as.hms(60*24)
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
?leaflet
runApp('FireWeatherExplorer')
runApp('FireWeatherExplorer')
ggplot(data = wx_df,
aes(x = Month, y = RH))+
geom_boxplot()+
coord_flip()
names(wx_df)
ggplot(data = goodWx,
aes(x = Month, y = RH))+
geom_boxplot()+
coord_flip()
ggplot(data = goodWxOut,
aes(x = Month, y = RH))+
geom_boxplot()+
coord_flip()
ggplot(data = goodWxOut,
aes(x = Month, y = RH, group = x))+
geom_boxplot()+
coord_flip()
ggplot(data = goodWxOut,
aes(x = Month, y = RH, group = Month))+
geom_boxplot()
ggplot(data = filter(goodWxOut, Hour <= 18 & Hour >= 8),
aes(x = Month, y = RH, group = Month))+
geom_boxplot()
ggplot(data = filter(goodWxOut, Hour <= 18 & Hour >= 8),
aes(x = Month, y = Temp, group = Month))+
geom_boxplot()
ggplot(data = filter(goodWxOut, Hour <= 18 & Hour >= 8),
aes(x = Month, y = RH, group = Month))+
geom_boxplot()+
geom_point(alpha = .1)
ggplot(data = filter(goodWxOut, Hour <= 18 & Hour >= 8),
aes(x = Month, y = RH, group = Month))+
geom_point(alpha = .1)
ggplot(data = filter(goodWxOut, Hour <= 18 & Hour >= 8),
aes(x = Month, y = Temp, group = Month))+
geom_boxplot()
ggplot(data = goodWxOut,
aes(x = Hour, y = Temp, group = Hour))+
geom_boxplot()
ggplot(data = goodWxOut,
aes(x = Hour, y = RH, group = Hour))+
geom_boxplot()
ggplot(data = goodWxOut,
aes(x = Hour, y = Wind_Speed, group = Hour))+
geom_boxplot()
runApp('FireWeatherExplorer')
?shinyServer
restart()
restart
